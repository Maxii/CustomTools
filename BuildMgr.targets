<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="UnityTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 12/15 POC and Trials Solutions and Zonked Project are no longer used. -->
  <!-- 12/15 FxCop Analysis no longer used as VS 2015 Community uses better version (uses Roslyn Rules) in Code Analysis Tools -->

  <!-- For the Attrib task that removes readonly flags -->
  <Import Project="$(MSBuildCommunityTasksPath)MSBuild.Community.Tasks.Targets" />


  <!-- Clean - full clean of everything except Unity -->
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      <!-- 12/15 FxCop Analysis no longer used as VS 2015 Community uses better version (uses Roslyn Rules) in Code Analysis Tools -->
      <!-- CleanFxCop; --> <!-- Clean FxCop first before the FxCopAssemblies are cleaned to avoid fxcop.targets error -->
      _CoreClean;
      _ProjectClean;
    </CleanDependsOn>
  </PropertyGroup>

  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)" />
  <Target Name="_CoreClean" >
    <!-- Clean Outputs from all configurations in the CommonOutputDir -->
    <ItemGroup>
      <AllFilesInCommonOutputDir Include="$(CommonOutputDir)\%(AllConfigurations.Identity)\**\*" /> <!-- FIXME extra \? -->
    </ItemGroup>

    <Attrib Files="@(AllFilesInCommonOutputDir)" ReadOnly="false" />
    <Delete Files="@(AllFilesInCommonOutputDir)" />
    <!-- IMPROVE RemoveDir Directories="$(...)" -->
  </Target>
  
  <Target Name="_ProjectClean">
    <!-- Clean default project-specific outputs too as other Solution Builds can populate them -->
    <MSBuild Projects="@(ProjectFilesToBuild)"
             BuildInParallel="true"
             Properties="Configuration=%(AllConfigurations.Identity)"
             Targets="Clean">
    </MSBuild>
  </Target>

  <Target Name="_UnityAssyClean">
    <ItemGroup>
      <IncludedAssyFilesToClean Include="$(UnityCodeLibraryDir)**\*" />
      <IncludedAssyFilesToClean Include="$(UnityCodeLibrarySourceDir)**\*" />
      <ExcludedAssyFilesToClean></ExcludedAssyFilesToClean>

      <UnityAssyFilesToClean Include="@(IncludedAssyFilesToClean)" Exclude="@(ExcludedAssyFilesToClean)" />
    </ItemGroup>

    <Attrib Files="@(UnityAssyFilesToClean)" ReadOnly="false" />
    <Delete Files="@(UnityAssyFilesToClean)" />
    <!-- IMPROVE RemoveDir Directories="$(UnityCodeLibraryDir)" -->
  </Target>

  <Target Name="_UnityXmlDataClean">
    <ItemGroup>
      <IncludedDataFilesToClean Include="$(UnityDataLibraryDir)**\*" />
      <ExcludedDataFilesToClean></ExcludedDataFilesToClean>

      <UnityDataFilesToClean Include="@(IncludedDataFilesToClean)" Exclude="@(ExcludedDataFilesToClean)" />
    </ItemGroup>

    <Attrib Files="@(UnityDataFilesToClean)" ReadOnly="false" />
    <Delete Files="@(UnityDataFilesToClean)" />
    <!-- IMPROVE RemoveDir Directories="$(UnityDataLibraryDir)" -->
  </Target>

  <Target Name="_UnityScriptClean">
    <ItemGroup>
      <IncludedScriptFilesToClean Include="$(UnityScriptsDir)**\*" />
      <!-- IMPROVE limit deletions to only those that are coming from the ScriptsFactory? -->
      <IncludedScriptFilesToClean Include="$(UnityEditorDir)**\*" />
      <ExcludedScriptFilesToClean></ExcludedScriptFilesToClean>

      <UnityScriptFilesToClean Include="@(IncludedScriptFilesToClean)" Exclude="@(ExcludedScriptFilesToClean)" />
    </ItemGroup>

    <Attrib Files="@(UnityScriptFilesToClean)" ReadOnly="false" />
    <Delete Files="@(UnityScriptFilesToClean)" />
    <!-- IMPROVE RemoveDir Directories="$(UnityCodeLibraryDir)" -->
  </Target>

  <!-- Build - incremental build of ALL included Projects -->
  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      BeforeBuild;
      _CoreBuild;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />
  <Target Name="BeforeBuild" />
  <!-- _CoreBuild using Target batching to get incremental build behavior -->
  <Target Name="_CoreBuild" Inputs="@(ProjectFilesToBuild)" Outputs="%(ConfigurationList.Identity)" >
    <MSBuild
    Projects="@(ProjectFilesToBuild)"
    Targets="Build"
    Properties="OutputPath=$(CommonOutputDir)%(ConfigurationList.Identity); Configuration=%(ConfigurationList.Identity)" >
      <Output ItemName="BuildOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>
    <Message Text="Build Outputs: $(NewLine)@(BuildOutputs, '$(NewLine)')" Importance="high"/>
  </Target>
  <Target Name="AfterBuild" />

  <!-- Rebuild - full clean followed by a new VS Build of Code -->
  <PropertyGroup>
    <RebuildDependsOn>
      $(RebuildDependsOn);
      Clean;
      _IncrementAssemblyVersion;
      Build;
    </RebuildDependsOn>
  </PropertyGroup>

  <Target Name="Rebuild" DependsOnTargets="$(RebuildDependsOn)" />

  <!-- As a Rebuild of the AssemblyVersionInfo project generated from here currently doesn't generate 
    an increment of the version number (bug in Build Version Increment addin?), I need to manually Rebuild 
    that project before I Rebuild with this BuildMgr. -->
  <Target Name="_IncrementAssemblyVersion" >
    <ItemGroup>
      <AssyVersionInfoProject Include="$(CustomToolsSolutionDir)CustomTools.AssemblyVersionInfo\CustomTools.AssemblyVersionInfo.csproj" />
    </ItemGroup>

    <MSBuild Projects="@(AssyVersionInfoProject)"
             Properties="OutputPath=bin\%(ConfigurationList.Identity); Configuration=%(ConfigurationList.Identity)"
             Targets="Rebuild" >
      <Output ItemName="AssemblyVersionBuildOutput" TaskParameter="TargetOutputs"/>   
    </MSBuild>
    <!--<Message Text="Configuration= @(ConfigurationList)" Importance="high" />-->
    <!--<Message Text="Assembly Version Output: $(NewLine)@(AssemblyVersionBuildOutput, '$(NewLine)')" Importance="high" />-->
    <!--<Warning Text="Auto Version Increment does not work. %0aDid you remember to increment the Assembly Version by rebuilding the AssemblyVersionInfo Project manually?" />-->
  </Target>

  <!-- Test - fills in any build gaps, then runs all Unit Tests -->
  <PropertyGroup>
    <TestDependsOn>
      $(TestDependsOn);
      Build;
    </TestDependsOn>
  </PropertyGroup>

  <Target Name="Test" DependsOnTargets="$(TestDependsOn)">
    <!-- TODO how to detect and call unit test project, see http://knot.org/scottlaw/blog/?p=400#comments -->
    <!-- Need notification of success or failure -->
    <Message Text="Running Unit Tests which currently do nothing." Importance="high"/>
  </Target>
  
  <!-- 12/15 FxCop Analysis no longer used as VS 2015 Community uses better version (uses Roslyn Rules) in Code Analysis Tools -->
  <!-- FxCopAndUnitTest - cleans, builds and runs FxCop and then Unit Tests -->
  <PropertyGroup>
    <RunFxCopDependsOn>
      <!-- Overwrites same in fxcop.targets so must be defined before it is used in following property -->
      _IdentifyFxCopAssemblies;
      $(RunFxCopDependsOn);
    </RunFxCopDependsOn>

    <FxCopAndUnitTestDependsOn>
      $(FxCopAndUnitTestDependsOn);
      Rebuild;
      $(RunFxCopDependsOn);
      Test;
    </FxCopAndUnitTestDependsOn>
  </PropertyGroup>

  <Target Name="FxCopAndUnitTest" DependsOnTargets="$(FxCopAndUnitTestDependsOn)" />

  <!-- FxCop - insert identity of FxCop Assemblies prior to cleaning or running FxCop -->
  <Target Name="_IdentifyFxCopAssemblies">
    <ItemGroup>
      <AllReleaseAssemblies Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\*.dll; $(CommonOutputDir)%(ConfigurationList.Identity)\**\*.exe" />
      
      <ExcludedReleaseAssemblies Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\*.Tests.*" />
      <!-- FxCop requires the presence of any .dll references not in the GAC (ie. Unity Assys). nunit.framework is dragged along with
      the unity references probably because they reference it. None of these need to be analyzed. -->
      <ExcludedReleaseAssemblies Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\UnityEngine.dll" />
      <ExcludedReleaseAssemblies Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\UnityEngine.UI.dll" /> <!-- New Unity5 UI.dll -->
      <ExcludedReleaseAssemblies Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\UnityEditor.dll" />
      <ExcludedReleaseAssemblies Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\nunit.framework.dll" />
      <!-- Resource Satellite files -->
      <ExcludedReleaseAssemblies Include="$(CommonOutputDir)%(ConfigurationList.Identity)\*-*\**\*.*" />

      <FxCopAssemblies Include="@(AllReleaseAssemblies)" Exclude="@(ExcludedReleaseAssemblies)" />
      <!-- Alternative implementation below using @(BuildOutputs) -->
      <!--<ExcludedAssemblies Include="$(CommonOutputDir)Debug\**\*.*" />-->
      <!--<ExcludedAssemblies Include="$(CommonOutputDir)Release\**\*.Tests.dll" />-->
      <!--<FxCopAssemblies Include="@(BuildOutputs)" Exclude="@(ExcludedAssemblies)" />-->
    </ItemGroup>
  </Target>

  <!-- UnityTest - cleans, builds and sets up Unity for testing -->
  <PropertyGroup>
    <UnityTestDependsOn>
      $(UnityTestDependsOn);
      Rebuild;  <!-- Replaced FxCopAndUnitTest with Rebuild to shorten build cycle -->
      _UnityAssyClean;  <!-- Don't clean Unity until the build is successful -->
      _CopyOutputToUnity;
      _CopySourceToUnity;
      _UnityXmlDataClean;
      _CopyXmlDataToUnity;
      <!--_GenerateMdbFiles;-->;  <!-- Removed 12/15 to make move to VSToolsForUnity -->
      <!-- Unity .pdb files are automatically cleaned after .mdb files are generated -->
      _UnityScriptClean;  <!-- Don't clean Unity scripts until no build or .mdb failure can occur -->
      CopyScriptsToUnity;
      _LaunchUnity;
      _PromptMonoDebuggerLaunch;
    </UnityTestDependsOn>
  </PropertyGroup>

  <Target Name="UnityTest" DependsOnTargets="$(UnityTestDependsOn)" />

  <!-- Copy all Output files (except Test-related) from the CommonOutputDir to Unity's CodeLibrary -->
  <Target Name="_CopyOutputToUnity" >
    <!-- No need for incremental copy as Unity is cleaned before this task is called -->
    <ItemGroup>
      <AllOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\*.*" />
      <!-- None of the output file types below have any use inside of the Unity Engine -->
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\*.Tests.*" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\*.config" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\*.xml" />  <!-- New Unity5 API Comment files -->
      
      <!-- The Unity Engine/Editor and nunit Assemblies are not needed in the Unity CodeLibrary -->
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\UnityEngine.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\UnityEngine.UI.dll" /> <!-- New Unity5 UI.dll -->
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\UnityEditor.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\nunit.framework.dll" />    
      <!--<ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\*-*\**\*.*" /> Would exclude Resource Satellite files -->

      <!-- Excluding these .dlls should be redundant as CopyLocal=false -->
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\AStar.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\AStarEditor.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\Contextual.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\ContextualEditor.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\ContextualExamples.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\GridFramework.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\GridFrameworkDebug.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\GridFrameworkEditor.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\Ngui.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\NguiEditor.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\NguiExamples.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\SciFiEffects.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\SmoothTurret.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\SoundManagerPro.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\SoundManagerProEditor.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\SpaceD.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\SpaceDEditor.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\Vectrosity.dll" />
      <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\VectrosityEditor.dll" />
      <!--11/15 UnitySerializer removed. <ExcludedOutputFiles Include="$(CommonOutputDir)%(ConfigurationList.Identity)\**\Assembly-CSharp-firstpass.dll" />-->

      <OutputFilesToCopy Include="@(AllOutputFiles)" Exclude="@(ExcludedOutputFiles)" />
      <!-- UNCLEAR what about .config files and copy local references? -->
    </ItemGroup>

    <!-- If the Unity CodeLibrary directory doesn't exist then create it -->
    <MakeDir Directories="$(UnityCodeLibraryDir)" Condition="!Exists('$(UnityCodeLibraryDir)')"/>
    <Message Text="Output files copied to Unity Code Library: $(NewLine)@(OutputFilesToCopy, '$(NewLine)')" Importance="high"/>
    <!-- The Well-known Item Metadata ".RecursiveDir" also copies the satellite directory structure along with the files  -->
    <Copy SourceFiles="@(OutputFilesToCopy)" DestinationFolder="$(UnityCodeLibraryDir)%(OutputFilesToCopy.RecursiveDir)" OverwriteReadOnlyFiles="true" />
  </Target>

  <!-- Copies the source (.cs text files) of files built in separate assemblies to the Source folder to support MonoDev debug -->
  <Target Name="_CopySourceToUnity" AfterTargets="_CopyOutputToUnity">
    <ItemGroup>
      <!-- Include every .cs file in the Master Solution and the targeted Solution -->
      <IncludedSource Include="$(SolutionDir)**\*.cs" />
      <IncludedSource Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)**\*.cs" />
      <!-- Exclude anything in ScriptsFactory projects -->
      <ExcludedSource Include="$(SolutionDir)$(SolutionName).*ScriptsFactory\**\*" />
      <ExcludedSource Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)$(MasterSolutionName).*ScriptsFactory\**\*" />
      <!-- Exclude anything in Properties folders -->
      <ExcludedSource Include="$(SolutionDir)**\Properties\*" />
      <ExcludedSource Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)**\Properties\*" />
      <!-- Exclude anything in a Test project -->
      <ExcludedSource Include="$(SolutionDir)**\*.Tests\**\*" />
      <ExcludedSource Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)**\*.Tests\**\*" />
      <!-- Exclude anything (autogenerated *.g.cs files) in \obj -->
      <ExcludedSource Include="$(SolutionDir)**\obj\**\*" />
      <ExcludedSource Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)**\obj\**\*" />
      <!-- Exclude GlobalSuppressions.cs files -->
      <ExcludedSource Include="$(SolutionDir)**\GlobalSuppressions.cs" />
      <ExcludedSource Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)**\GlobalSuppressions.cs" />
      <!-- Exclude anything in the DeadCode folder -->
      <ExcludedSource Include="$(SolutionDir)DeadCode\**\*" />
      <ExcludedSource Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)DeadCode\**\*" />
      <!-- Exclude anything from the Projects that are explicitly excluded from the build -->
      <!--<ExcludedSource Include="@(ExcludedProjectList -> '%(RootDir)%(Directory)**\*.cs')" />--> <!-- Uncomment this if ExcludedProjectList is declared. -->

      <SourceToCopy Include="@(IncludedSource)" Exclude="@(ExcludedSource)" />
    </ItemGroup>

    <!-- If the Unity CodeLibrarySource directory doesn't exist then create it -->
    <MakeDir Directories="$(UnityCodeLibrarySourceDir)" Condition="!Exists('$(UnityCodeLibrarySourceDir)')"/>
    <Message Text="CodeLibrary source (.cs) files copied to Unity CodeLibrarySource Folder: $(NewLine)@(SourceToCopy, '$(NewLine)')" Importance="high"/>
    <!-- The Well-known Item Metadata ".RecursiveDir" also copies source in deeper nested folders inside their projects.  -->
    <Copy SourceFiles="@(SourceToCopy)" DestinationFolder="$(UnityCodeLibrarySourceDir)%(SourceToCopy.RecursiveDir)" OverwriteReadOnlyFiles="true" />
  </Target>

  <!-- Generate the .mdb debug file in Unity IFF the one that may already be there requires updating -->
  <Target Name="_GenerateMdbFiles" >
    <!-- No need for incremental approach as Unity is cleaned before this task is called -->
    <PropertyGroup>
      <!-- pdb2mdb.exe does not work if copied to a \contrib folder. It probably needs Mono.Cecil -->
      <!-- $(ProgramFiles) required to accommodate C:\Program Files(x86)\ on 64 bit machines for Unity4.x -->
      <!-- I DONOT UNDERSTAND WHY THE ProgramFiles EnvVariable points to C:\Program Files(x86)! -->
      
      <!-- Registry's Unity Editor 4.x\Location does not exist so stick with 3.x. Points to same place --> 
       <!--<UnityInstallDir>$([System.IO.Path]::GetDirectoryName($(registry:HKEY_CURRENT_USER\Software\Unity Technologies\Unity Editor 3.x\Location)))\</UnityInstallDir> -->
      <!-- <MdbGeneratorPath>$(UnityInstallDir)Data\MonoBleedingEdge\lib\mono\4.0\pdb2mdb.exe</MdbGeneratorPath> -->

      <!-- Registry's Unity Editor 5.x\Location does not exist so hard code UnityInstallDir here. -->
      <!-- <UnityInstallDir>$(ProgramFiles)\Unity\Editor\</UnityInstallDir> --> <!-- $(ProgramFiles) returns C:\Program Files (x86)\-->
      <UnityInstallDir>C:\Program Files\Unity\Editor\</UnityInstallDir>    <!-- Unity5 64 bit install location-->
      <!-- IMPORTANT ..\mono\4.5\pdb2mdb.exe throws FileNotFound error about Mono.Cecil.dll which is in ..\mono\gac
      so I copied it to ..\4.5\ Dir and it now works. I also found a Unity bug filed about it. -->
      <MdbGeneratorPath>$(UnityInstallDir)Data\MonoBleedingEdge\lib\mono\4.5\pdb2mdb.exe</MdbGeneratorPath>
    </PropertyGroup>

    <ItemGroup>
      <AllAssembliesInUnity Include="$(UnityCodeLibraryDir)**\*.dll; $(UnityCodeLibraryDir)**\*.exe" />
      <ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\UnityEngine.dll" />
      <ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\UnityEditor.dll" />
      <ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\UnityEngine.UI.dll" />      <!-- New Unity5 -->
      <ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\nunit.framework.dll" />
      <ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\MoreLinq.dll" />         <!-- New as lost WhyDoIDoIt.Radical -->
      <!-- Exclusions not needed as .dlls are not copied to CodeLibraryDir -->
      <!--<ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\Vectrosity.dll" />-->
      <!--<ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\Ngui.dll" />-->
      <!--<ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)**\Contextual.dll" />-->

      <!-- Pdb2Mdb throws up on resource satellite assemblies so they are excluded below -->
      <ExcludedAssembliesInUnity Include="$(UnityCodeLibraryDir)*-*\**\*.*" /> 

      <MdbAssemblies Include="@(AllAssembliesInUnity)" Exclude="@(ExcludedAssembliesInUnity)" />
    </ItemGroup>
    
    <!-- <Message Text="Path to pdb2mdb.exe: $(MdbGeneratorPath)" Importance="high"/> -->
    <Message Text="Assemblies used to produce .mdb files: $(NewLine)@(MdbAssemblies, '$(NewLine)')" Importance="high"/>

    <!-- pdb2mdb.exe will only work if called from the directory containing the .dll and .pdb files -->
    <Exec Condition=" @(MdbAssemblies) != ''" WorkingDirectory="$(UnityCodeLibraryDir)" Command='"$(MdbGeneratorPath)" %(MdbAssemblies.Identity)' />
  </Target>

  <!-- Delete the .pdb files from Unity -->
  <Target Name="_CleanUnityPdbFiles" AfterTargets="_GenerateMdbFiles" >
    <ItemGroup>
      <PdbFilesToDelete Include="$(UnityCodeLibraryDir)**\*.pdb" />
    </ItemGroup>

    <Attrib Files="@(PdbFilesToDelete)" ReadOnly="false" />
    <Delete Files="@(PdbFilesToDelete)">
      <!-- <Delete Files="$(UnityCodeLibraryDir)**\*.pdb" /> doesn't work as it isn't a list, ala ItemGroup? -->
      <Output ItemName="FilesDeleted" TaskParameter="DeletedFiles" />
    </Delete>
    <Message Text="Pdb Files Deleted: $(NewLine)@(FilesDeleted, '$(NewLine)')" Importance="high"/>
  </Target>

  <!-- Copy Scripts .cs files to Unity's Scripts Folder -->
  <PropertyGroup>
    <CopyScriptsToUnityDependsOn>
      $(CopyScriptsToUnityDependsOn);    
      _CopyGameScriptsToUnity;
      _CopyEditorScriptsToUnity;
    </CopyScriptsToUnityDependsOn>
  </PropertyGroup>
  <Target Name="CopyScriptsToUnity" DependsOnTargets="$(CopyScriptsToUnityDependsOn)" AfterTargets="_CopyOutputToUnity" />
  <Target Name="_CopyGameScriptsToUnity" >
    <ItemGroup>
      <IncludedGameScripts Include="$(SolutionDir)$(SolutionName).GameScriptsFactory\**\*.cs" />

      <IncludedGameScripts Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)$(MasterSolutionName).GameScriptsFactory\**\*.cs" />
      <!--Exclude AssemblyInfo.cs -->
      <ExcludedGameScripts Include="$(SolutionDir)$(SolutionName).*\Properties\*" />  
      <ExcludedGameScripts Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)$(MasterSolutionName).*\Properties\*" />
      <!-- Exclude GlobalSuppressions.cs files -->
      <ExcludedGameScripts Include="$(SolutionDir)**\GlobalSuppressions.cs" />
      <ExcludedGameScripts Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)**\GlobalSuppressions.cs" />
      <!-- No need to exclude referenced Assemblies as only *.cs are copied -->

      <GameScriptsToCopy Include="@(IncludedGameScripts)" Exclude="@(ExcludedGameScripts)" />
    </ItemGroup>

    <!-- If the Unity Scripts directory doesn't exist then create it -->
    <MakeDir Directories="$(UnityScriptsDir)" Condition="!Exists('$(UnityScriptsDir)')"/>
    <Message Text="Script (.cs) files copied to Unity Scripts Folder: $(NewLine)@(GameScriptsToCopy, '$(NewLine)')" Importance="high"/>
    <!-- The Well-known Item Metadata ".RecursiveDir" also copies scripts in deeper nested folders in the ScriptsFactory project.  -->
    <Copy SourceFiles="@(GameScriptsToCopy)" DestinationFolder="$(UnityScriptsDir)%(GameScriptsToCopy.RecursiveDir)" OverwriteReadOnlyFiles="true" />
  </Target>
  <Target Name="_CopyEditorScriptsToUnity" >
    <ItemGroup>
      <IncludedEditorScripts Include="$(SolutionDir)$(SolutionName).EditorScriptsFactory\**\*.cs" />
      <IncludedEditorScripts Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)$(MasterSolutionName).EditorScriptsFactory\**\*.cs" />
      <!--Exclude AssemblyInfo.cs -->
      <ExcludedEditorScripts Include="$(SolutionDir)$(SolutionName).EditorScriptsFactory\Properties\*" />
      <ExcludedEditorScripts Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)$(MasterSolutionName).EditorScriptsFactory\Properties\*" />
      <!-- Exclude GlobalSuppressions.cs files -->
      <ExcludedEditorScripts Include="$(SolutionDir)**\GlobalSuppressions.cs" />
      <ExcludedEditorScripts Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)**\GlobalSuppressions.cs" />
      <!-- No need to exclude referenced Assemblies as only *.cs are copied -->
      
      <EditorScriptsToCopy Include="@(IncludedEditorScripts)" Exclude="@(ExcludedEditorScripts)" />
    </ItemGroup>

    <!-- If the Unity Editor directory doesn't exist then create it -->
    <MakeDir Directories="$(UnityEditorDir)" Condition="!Exists('$(UnityEditorDir)')"/>
    <Message Text="Script (.cs) files copied to Unity Editor Folder: $(NewLine)@(EditorScriptsToCopy, '$(NewLine)')" Importance="high"/>
    <!-- The Well-known Item Metadata ".RecursiveDir" also copies scripts in deeper nested folders in the EditorScriptsFactory project.  -->
    <Copy SourceFiles="@(EditorScriptsToCopy)" DestinationFolder="$(UnityEditorDir)%(EditorScriptsToCopy.RecursiveDir)" OverwriteReadOnlyFiles="true" />
  </Target>

  <!-- Copy Data .xml files to Unity's DataLibrary Folder -->  
  <Target Name="_CopyXmlDataToUnity" AfterTargets="CopyScriptsToUnity">
    <ItemGroup>
      <!-- Include every .xml file in the Master Solution and the targeted Solution's DataLibrary -->
      <IncludedData Include="$(SolutionDir)DataLibrary\**\*.xml" />
      <IncludedData Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)DataLibrary\**\*.xml" />
      <ExcludedData Include="$(SolutionDir)DataLibrary\Schemas\**\*.*"/> <!-- Schemas not needed during runtime -->
      <ExcludedData Condition="$(SolutionDir) != $(MasterSolutionDir)" Include="$(MasterSolutionDir)DataLibrary\Schemas\**\*.*" />

      <DataToCopy Include="@(IncludedData)" Exclude="@(ExcludedData)" />
    </ItemGroup>
    
    <!-- If the Unity DataLibrary directory doesn't exist then create it -->
    <MakeDir Directories="$(UnityDataLibraryDir)" Condition="!Exists('$(UnityDataLibraryDir)')"/>
    <Message Text="DataLibrary (.xml) files copied to Unity DataLibrary Folder: $(NewLine)@(DataToCopy, '$(NewLine)')" Importance="high"/>
    <!-- The Well-known Item Metadata ".RecursiveDir" also copies from deeper nested folders inside the top level directory.  -->
    <Copy SourceFiles="@(DataToCopy)" DestinationFolder="$(UnityDataLibraryDir)%(DataToCopy.RecursiveDir)" OverwriteReadOnlyFiles="true" />
  </Target>
  
  <!-- Launch Unity -->
  <Target Name="_LaunchUnity" >
    <PropertyGroup>
      <UnityProjectScenePath>$(UnityProjectDir)Assets\Scenes\DefaultScene.unity</UnityProjectScenePath>
    </PropertyGroup>

    <!--  TODO Use EditorApplication.isPlaying = true; -->
    <!-- <Exec Command="$(UnityProjectScenePath)" /> Confirmed working. -->
    <Message Text="Dummy _LaunchUnity Target called." Importance="high"/>
  </Target>

  <!-- Operator is prompted to manually launch and attach MonoD to Unity -->
  <Target Name="_PromptMonoDebuggerLaunch" >
    <Message Text="Launch and attach the MonoDebugger." Importance="high" />
  </Target>

  <!-- General approach to INCREMENTALLY copying files. Key is _DynamicallyFindFilesToCopy target must exit before 
    FilesToCopySetupAsExternalProperty new content is visible to _CopyFilesCore -->
  <!--
    <Target Name="_DynamicallyFindFilesToCopy">
        <ItemGroup>
            <FilesToCopySetupAsExternalItemGroup Include="UseBatchingToGenerateListOfFiles" />
        </ItemGroup>
    </Target>
    <Target Name="CopyFiles" DependsOnTargets="_DynamicallyFindFilesToCopy" >
        <CallTarget Targets="_CopyFilesCore" />
    </Target>
    <Target Name="_CopyFilesCore" Inputs="@(FilesToCopySetupAsExternalProperty)"
            Outputs="@(FilesToCopySetupAsExternalItemGroup->'$(DirToCopyTo)%(Filename)%(Extension)')" >
        <MakeDir Directories="$(DirToCopyTo)" Condition="!Exists('$(DirToCopyTo)')"/>
        <Copy SourceFiles="@(FilesToCopySetupAsExternalItemGroup)" DestinationFolder="$(DirToCopyTo)" OverwriteReadOnlyFiles="true" />
                    above ignores any nested directories, below also copies the nested directory structure 
        <Copy SourceFiles="@(FilesToCopySetupAsExternalItemGroup)" DestinationFolder="$(DirToCopyTo)%(FilesToCopySetupAsExternalItemGroup.RecursiveDir)" OverwriteReadOnlyFiles="true" />

    </Target>
    -->

</Project>
